service: candidate-service

frameworkVersion: ">=1.1.0 <4.0.0"

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: ap-south-1
  environment:
    CANDIDATE_TABLE: ${self:service}-${opt:stage, self:provider.stage}
    CANDIDATE_EMAIL_TABLE: "candidate-email-${opt:stage, self:provider.stage}"
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"

custom:
  tableName: candidate-service-dev
  dynamodb:
      stages:
          - dev
      start:
          port: 8000
          inMemory: true
          migrate: true
      migration:
          dir: offline/migrations

functions:
  candidateSubmission:
    handler: api/CandidateHandler.postCandidateHandler
    memorySize: 128
    description: Submit candidate information and starts interview process.
    events:
      - http: 
          path: candidates
          method: post
  listCandidates:
    handler: api/CandidateHandler.listCandidateHandler
    memorySize: 128
    description: List all candidates
    events:
      - http: 
          path: candidates
          method: get
  # candidateDetails:
  #   handler: api/candidate.get
  #   events:
  #     - http:
  #         path: candidates/{id}
  #         method: get
  # deleteCandidate:
  #   handler: api/candidate.delete
  #   memorySize: 128
  #   description: Delete specified candidate
  #   events:
  #     - http: 
  #         path: candidates/{id}
  #         method: delete


resources:
  Resources:
    CandidatesDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: "id"
            AttributeType: "S"   
        KeySchema:
          -
            AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: "NEW_AND_OLD_IMAGES"
        TableName: ${self:provider.environment.CANDIDATE_TABLE}

plugins:
  - serverless-dynamodb
  - serverless-offline
  - serverless-plugin-typescript

package:
  individually: true
  exlcudeDevDependencies: false
  include:
    - api/**/*.js
    - api/**/models/*.js
    - api/**/node_modules/**
    - common/**
    - models/**
    - jsonSchema/**
    - api/**
  exclude:
    - 'api/*.ts'
    - 'api/models/*.ts'
    - '!api/**/node_modules/aws-sdk/**'
    - api/**/package.json
    - api/**/package-lock.json
    - api/**/.npmrc
    - venv/**
    - node_modules/**
    - tsconfig.json
    - tslint.json
    - .npmignore
    - .vscode/**
    - '*.ts'
    - Cloudformation Templates/*

